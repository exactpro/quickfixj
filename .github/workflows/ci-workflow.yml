name: Build and Publish Release Version

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: liberica

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare a tool to detect unwelcome words
        uses: actions/checkout@v4
        with:
          repository: exactpro/ci-github-action
          ref: rm86256
          token: ${{ secrets.PAT_CI_ACTION }}
          path: ci-github-unwelcome-words-action

      - name: Run CI action to detect unwelcome words
        uses: ./ci-github-unwelcome-words-action
        with:
          ref: ${{ github.sha }}

      - name: Build project and run tests
        run: ./gradlew clean build -PreleaseMode

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/reports/
            **/build/test-results/

      - name: Upload Archives
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_SECRET_KEY: ${{ secrets.SIGNING_SECRET_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        run: |
          ./gradlew closeAndReleaseStagingRepositories publish \
            -PreleaseMode \
            -Psigning.keyId=$SIGNING_KEY_ID \
            -Psigning.secretKey=$SIGNING_SECRET_KEY \
            -Psigning.password=$SIGNING_PASSWORD \
            -PossrhUsername=$OSSRH_USERNAME \
            -PossrhPassword=$OSSRH_PASSWORD

      - name: Read version of the project
        id: read_project_version
        run: |
          VERSION=$(./gradlew properties | grep -w "version" | cut -d ':' -f 2 | xargs)
          echo "Version found: ${VERSION}"
          echo "project_version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create Tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/v${{ steps.read_project_version.outputs.project_version }}",
              sha: context.sha
            })

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.read_project_version.outputs.project_version }}"
          release_name: "Release v${{ steps.read_project_version.outputs.project_version }}"
          body: "Release of version ${{ steps.read_project_version.outputs.project_version }}"
          draft: false
          prerelease: false
